import { Repository } from 'typeorm';
import { ProfileFeedItem } from './profilefeed-item.entity';
import { ProfileUser } from '../profileusers/profileuser.entity';
import { CreateProfileFeedItemDto } from '../dto/create-profilefeed-item.dto';
import { ProfileFeedItemDto } from '../dto/profilefeed-item.dto';
import { Organization } from 'src/organization/organization.entity';
import { OrganizationMember } from 'src/organization/organization-member.entity';
import { LinkedCardLayer } from 'src/homefeed/linked-card-layer.entity';
import { LayerMember } from 'src/homefeed/layer-member.entity';
export declare class ProfileFeedService {
    private profileFeedRepository;
    private userRepository;
    private orgRepository;
    private orgMemberRepo;
    private layerRepo;
    private layerMemberRepo;
    constructor(profileFeedRepository: Repository<ProfileFeedItem>, userRepository: Repository<ProfileUser>, orgRepository: Repository<Organization>, orgMemberRepo: Repository<OrganizationMember>, layerRepo: Repository<LinkedCardLayer>, layerMemberRepo: Repository<LayerMember>);
    private assertValidFeedType;
    private getUser;
    private assertOrgExists;
    private assertSubjectIsOrgMember;
    private getOrgMembership;
    private filterByLayerLock;
    findAll(orgId: number): Promise<ProfileFeedItem[]>;
    findOne(orgId: number, id: number): Promise<ProfileFeedItem>;
    findAllByFeedType(orgId: number, subjectUsername: string, feedType: string, viewerUsername: string): Promise<ProfileFeedItemDto[]>;
    create(orgId: number, username: string, dto: CreateProfileFeedItemDto, feedType: string): Promise<ProfileFeedItemDto>;
    update(orgId: number, id: number, patch: Partial<ProfileFeedItemDto>): Promise<ProfileFeedItemDto>;
    delete(orgId: number, username: string, id: number, feedType: string): Promise<void>;
    private toDto;
}
