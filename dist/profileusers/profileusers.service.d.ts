import { Repository } from 'typeorm';
import { ProfileUser } from './profileuser.entity';
import { ProfileFeedItem } from '../profilefeed/profilefeed-item.entity';
import { Follower, Following } from './follower.entity';
import { FollowerDto, FollowingDto } from 'src/dto/profileuser.dto';
import { Organization } from 'src/organization/organization.entity';
import { OrganizationMember } from 'src/organization/organization-member.entity';
export declare class ProfileusersService {
    private usersRepository;
    private profileFeedRepository;
    private followersRepository;
    private followingRepository;
    private orgRepository;
    private orgMemberRepository;
    constructor(usersRepository: Repository<ProfileUser>, profileFeedRepository: Repository<ProfileFeedItem>, followersRepository: Repository<Follower>, followingRepository: Repository<Following>, orgRepository: Repository<Organization>, orgMemberRepository: Repository<OrganizationMember>);
    private getUser;
    private getOrg;
    private assertMember;
    findOne(orgId: number, username: string): Promise<ProfileUser>;
    update(orgId: number, username: string, updateUserDto: Partial<ProfileUser>): Promise<ProfileUser>;
    create(userDto: Partial<ProfileUser>): Promise<ProfileUser>;
    create(orgId: number | null, userDto: Partial<ProfileUser>): Promise<ProfileUser>;
    addFollower(orgId: number, username: string, followerDto: FollowerDto): Promise<FollowerDto>;
    addFollowing(orgId: number, username: string, followingDto: FollowingDto): Promise<FollowingDto>;
    removeFollowing(orgId: number, username: string, followingId: number): Promise<void>;
    removeFollower(orgId: number, username: string, followerId: number): Promise<void>;
    getFollowers(orgId: number, username: string): Promise<FollowerDto[]>;
    getFollowing(orgId: number, username: string): Promise<FollowingDto[]>;
    updateFollowerStatus(orgId: number, username: string, followerId: number, isFollowing: boolean): Promise<FollowerDto>;
    private toFollowerDto;
    private toFollowingDto;
}
